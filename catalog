import java.io.FileReader;
import java.io.IOException;
import java.util.*;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;

public class SecretSharing {
    
    // Lagrange Interpolation function
    public static double lagrangeInterpolation(List<int[]> points, int x) {
        double result = 0.0;
        int n = points.size();
        
        for (int i = 0; i < n; i++) {
            int xi = points.get(i)[0];
            int yi = points.get(i)[1];
            double term = yi;
            
            for (int j = 0; j < n; j++) {
                if (i != j) {
                    int xj = points.get(j)[0];
                    term *= (double) (x - xj) / (xi - xj);
                }
            }
            result += term;
        }
        
        return Math.round(result);
    }

    // Main function to parse JSON input and find the secret constant term `c`
    public static long findSecretConstant(String filename) {
        JSONParser parser = new JSONParser();
        
        try {
            // Step 1: Parse JSON file
            JSONObject data = (JSONObject) parser.parse(new FileReader(filename));
            JSONObject keys = (JSONObject) data.get("keys");
            int n = ((Long) keys.get("n")).intValue();
            int k = ((Long) keys.get("k")).intValue();

            // Step 2: Collect points (x, y) by decoding the y-values
            List<int[]> points = new ArrayList<>();
            
            for (Object key : data.keySet()) {
                if (!key.equals("keys")) {
                    int x = Integer.parseInt((String) key);
                    JSONObject valueInfo = (JSONObject) data.get(key);
                    int base = Integer.parseInt((String) valueInfo.get("base"));
                    String yEncoded = (String) valueInfo.get("value");
                    int y = Integer.parseInt(yEncoded, base);  // Decodes y value to base 10
                    points.add(new int[]{x, y});
                }
            }
            
            // Step 3: Sort points and select the first k points needed
            points.sort(Comparator.comparingInt(p -> p[0]));
            points = points.subList(0, k);

            // Step 4: Use Lagrange interpolation to find the polynomial's constant term
            return (long) lagrangeInterpolation(points, 0);

        } catch (IOException | ParseException e) {
            e.printStackTrace();
            return -1;
        }
    }

    // Driver method to test on two JSON test cases
    public static void main(String[] args) {
        System.out.println("Secret for first test case: " + findSecretConstant("testcase1.json"));
        System.out.println("Secret for second test case: " + findSecretConstant("testcase2.json"));
    }
}
